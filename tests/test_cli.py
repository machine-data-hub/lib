from typer.testing import CliRunner
import pytest
from pytest_mock import MockFixture
import requests
import responses
import json
import datetime
from machine_data_hub.cli import API_URL, app


MOCK_DATASETS = [
    {
        "id": "1",
        "Rank": 1,
        "Name": "Combined Cycle Power Plant",
        "Owner": "University of California Irvine",
        "DateDonated": "January 20, 2021",
        "URL": "https://archive.ics.uci.edu/ml/datasets/Combined+Cycle+Power+Plant",
        "ShortSummary": "The dataset contains 9568 data points collected from a Combined Cycle Power Plant over 6 years (2006-2011), when the power plant was set to work with full load. Features consist of hourly average ambient variables Temperature (T), Ambient Pressure (AP), Relative Humidity (RH) and Exhaust Vacuum (V) to predict the net hourly electrical energy output (EP) of the plant. A combined cycle power plant (CCPP) is composed of gas turbines (GT), steam turbines (ST) and heat recovery steam generators. In a CCPP, the electricity is generated by gas and steam turbines, which are combined in one cycle, and is transferred from one turbine to another. While the Vacuum is collected from and has effect on the Steam Turbine, he other three of the ambient variables effect the GT performance. For comparability with our baseline studies, and to allow 5x2 fold statistical tests be carried out, we provide the data shuffled five times. For each shuffling 2-fold CV is carried out and the resulting 10 measurements are used for statistical testing.",
        "OneLine": "Data collected from a Combined Power Plant working full load over 6 years.",
        "FileType": "xlsx",
        "Sector": "Power",
        "MLType": ["Regression"],
        "Labeled": "Yes",
        "TimeSeries": "No",
        "Simulation": "",
        "Attributes": 4,
        "Instances": 9568,
        "Downloads": 191037,
        "Likes": 0,
        "FileSize": "3.7 MB",
        "ImgLink": "/images/power-plant-bright-blue-sky.jpg",
        "Datasets": [
            {
                "Name": "File 1",
                "URL": "https://archive.ics.uci.edu/ml/machine-learning-databases/00294/CCPP.zip",
                "Likes": 0,
                "Downloads": 191037,
                "FileSize": "3.7 MB"
            }
        ]
    }
]

MOCK_BODY = json.dumps(MOCK_DATASETS).encode("utf-8")


@pytest.fixture
def mocked_responses():
    with responses.RequestsMock() as rsps:
        yield rsps


@pytest.fixture
def runner():
    return CliRunner()


# The first parameter to runner.invoke() is a Typer app.
# The second parameter is a list of str, with all the text you would pass in the command line, right as you would pass it:
def test_success_download(runner, mocked_responses):
    with open("tests/data/content.zip", "rb") as data:
        mocked_responses.add(
            responses.GET,
            API_URL,
            body=MOCK_BODY,
            status=200,
            content_type="application/json",
        )

        mocked_responses.add(
            responses.GET,
            "https://archive.ics.uci.edu/ml/machine-learning-databases/00294/CCPP.zip",
            body=data.read(),
            status=200,
            content_type="application/zip",
            stream=True,
        )

        result = runner.invoke(app, ["download", "1", "1"])
        assert result.exit_code == 0


def test_fail_download(runner, mocked_responses):
    # passing in incorrect id
    mocked_responses.add(
        responses.GET,
        API_URL,
        body=MOCK_BODY,
        status=200,
        content_type="application/json",
    )

    result = runner.invoke(app, ["download", "9999"])
    assert result.exit_code == 0


def test_metadata(runner, mocked_responses):
    mocked_responses.add(
        responses.GET,
        API_URL,
        body=MOCK_BODY,
        status=200,
        content_type="application/json",
    )
    res = requests.get("https://machinedatahub.ai/datasets.json")
    print(res.json())
    result = runner.invoke(app, ["metadata", "1"])
    assert result.exit_code == 0
    # assert f"Downloading {name} right now!" in result.stdout


def test_suggest(runner, mocked_responses):
    from machine_data_hub.cli import TOKEN

    name = "PyTest"
    summary = "PyTesting Summary"
    link = "https://pytest.com"

    # Create mock response
    org = "PHM-Data-Hub"
    team_slug = "uw-capstone-team"
    discussion_number = 1
    date_time = str(datetime.date.today()) + " " + str(datetime.datetime.now().time())
    body = (
        " ### "
        + name
        + "\n"
        + date_time
        + "\n\n**Summary:** "
        + summary
        + "\n**Link:** "
        + link
        + "\n\nSubmitted from command line interface"
    )
    query_url = f"https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"
    data = {"body": body}
    headers = {"Authorization": f"token {TOKEN}"}

    mocked_responses.add(
        responses.POST,
        query_url,
        body=json.dumps(data).encode("utf-8"),
        status=200,
        content_type="application/json",
    )

    result = runner.invoke(app, ["suggest", name, link, summary])
    assert result.exit_code == 0


def test_list(runner, mocked_responses):
    mocked_responses.add(
        responses.GET,
        API_URL,
        body=MOCK_BODY,
        status=200,
        content_type="application/json",
    )
    result = runner.invoke(app, ["list"])
    assert result.exit_code == 0
